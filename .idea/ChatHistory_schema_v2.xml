<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChatHistoryState">
    <option name="serializedSessions">
      <map>
        <entry key="c4a98481-ee61-4dc2-9795-cc1cea1d7a87" value="{&quot;id&quot;:&quot;c4a98481-ee61-4dc2-9795-cc1cea1d7a87&quot;,&quot;name&quot;:&quot;Flutter Agora Video Call Code用途&quot;,&quot;timestamp&quot;:1748495261148,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\n\u003ccurrent_file\u003e\n```dart:lib/main.dart\nimport \u0027package:flutter/material.dart\u0027;\nimport \u0027package:agora_rtc_engine/agora_rtc_engine.dart\u0027;\nimport \u0027package:permission_handler/permission_handler.dart\u0027;\n\nconst String appId \u003d \u002795d0575329144d00a9e8fd9846eee84d\u0027;\nconst String channelName \u003d \u0027test_channel\u0027;\nconst String token \u003d\n    \u0027007eJxTYGDIU/mxp76P8d2vOfMvt6vOiV+ntZPHmc9x7ooJ047xd/kpMBibGBhZphpbJqekGZskGpklplmkmqckG6aYJqUmWhqZb3hlntEQyMhgu7SMhZEBAkF8HoaS1OKS+OSMxLy81BwGBgBZyiLg\u0027;\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: \u0027Agora 영상통화 데모\u0027,\n      theme: ThemeData(\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n        useMaterial3: true,\n      ),\n      home: const VideoCallPage(),\n    );\n  }\n}\n\nclass VideoCallPage extends StatefulWidget {\n  const VideoCallPage({super.key});\n\n  @override\n  State\u003cVideoCallPage\u003e createState() \u003d\u003e _VideoCallPageState();\n}\n\nclass _VideoCallPageState extends State\u003cVideoCallPage\u003e {\n  late final RtcEngine _engine;\n  int? _remoteUid;\n  bool _isJoined \u003d false;\n\n  @override\n  void initState() {\n    super.initState();\n    _initAgora();\n  }\n\n  Future\u003cvoid\u003e _initAgora() async {\n    await [Permission.camera, Permission.microphone].request();\n    _engine \u003d createAgoraRtcEngine();\n    await _engine.initialize(const RtcEngineContext(appId: appId));\n    _engine.registerEventHandler(\n      RtcEngineEventHandler(\n        onJoinChannelSuccess: (connection, elapsed) {\n          setState(() {\n            _isJoined \u003d true;\n          });\n        },\n        onUserJoined: (connection, remoteUid, elapsed) {\n          setState(() {\n            _remoteUid \u003d remoteUid;\n          });\n        },\n        onUserOffline: (connection, remoteUid, reason) {\n          setState(() {\n            _remoteUid \u003d null;\n          });\n        },\n      ),\n    );\n  }\n\n  Future\u003cvoid\u003e _join() async {\n    await _engine.enableVideo();\n    await _engine.startPreview();\n    await _engine.joinChannel(\n      token: token,\n      channelId: channelName,\n      options: const ChannelMediaOptions(\n        clientRoleType: ClientRoleType.clientRoleBroadcaster,\n        channelProfile: ChannelProfileType.channelProfileCommunication,\n      ),\n      uid: 0,\n    );\n  }\n\n  Future\u003cvoid\u003e _leave() async {\n    await _engine.leaveChannel();\n    setState(() {\n      _isJoined \u003d false;\n      _remoteUid \u003d null;\n    });\n  }\n\n  @override\n  void dispose() {\n    _engine.release();\n    super.dispose();\n  }\n\n  Widget _renderLocalPreview() {\n    if (_isJoined) {\n      return AgoraVideoView(\n        controller: VideoViewController(\n          rtcEngine: _engine,\n          canvas: const VideoCanvas(uid: 0),\n        ),\n      );\n    } else {\n      return const Center(child: Text(\u0027채널에 참여해 주세요\u0027));\n    }\n  }\n\n  Widget _renderRemoteVideo() {\n    if (_remoteUid !\u003d null) {\n      return AgoraVideoView(\n        controller: VideoViewController.remote(\n          rtcEngine: _engine,\n          canvas: VideoCanvas(uid: _remoteUid),\n          connection: const RtcConnection(channelId: channelName),\n        ),\n      );\n    } else {\n      return const Center(child: Text(\u0027상대방을 기다리는 중...\u0027));\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text(\u0027Agora 영상통화 데모\u0027)),\n      body: Column(\n        children: [\n          Expanded(\n            child: Row(\n              children: [\n                Expanded(child: _renderLocalPreview()),\n                Expanded(child: _renderRemoteVideo()),\n              ],\n            ),\n          ),\n          Padding(\n            padding: const EdgeInsets.all(16.0),\n            child: Row(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                ElevatedButton(\n                  onPressed: _isJoined ? null : _join,\n                  child: const Text(\u0027참여\u0027),\n                ),\n                const SizedBox(width: 16),\n                ElevatedButton(\n                  onPressed: _isJoined ? _leave : null,\n                  child: const Text(\u0027나가기\u0027),\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\n```\n\u003c/current_file\u003e\n\u003c/additional_data\u003e\n\n\n\u003cuser_query\u003e\n이게 무슨 용도로 사용하는 코드같아?\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Flutter 앱에서 Agora RTC SDK를 이용해 카메라·마이크 권한을 요청하고, 지정 채널에 입장해 로컬 및 원격 비디오 스트림을 송수신하는 간단한 영상 통화 데모 코드입니다.&quot;}]}]}" />
      </map>
    </option>
  </component>
</project>